{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { initAuth0 } from '@auth0/nextjs-auth0';\nconst auth0 = initAuth0({\n  domain: process.env.AUTH0_DOMAIN,\n  clientId: process.env.AUTH0_CLIENTID,\n  clientSecret: process.env.AUTH0_CLIENTSECRET,\n  scope: 'openid profile',\n  redirectUri: process.env.AUTH0_REDIRECT_URI,\n  postLogoutRedirectUri: process.env.AUTH0_POSTLOGOUT_REDIRECT_URI,\n  session: {\n    cookieSecret: process.env.AUTH0_COOKIE_SECRET\n  }\n});\nexport default auth0;\nexport const isAuthorized = (user, role) => {\n  return user && user[process.env.AUTH0_NAMESPACE + '/roles'].includes(role);\n};\nexport const authorizeUser = async (req, res) => {\n  const session = await auth0.getSession(req);\n\n  if (!session || !session.user) {\n    res.writeHead(302, {\n      Location: '/api/v1/login'\n    });\n    res.end();\n    return null;\n  }\n\n  return session.user;\n};\nexport const withAuth = getData => role => async ({\n  req,\n  res\n}) => {\n  const session = await auth0.getSession(req);\n\n  if (!session || !session.user || role && !isAuthorized(session.user, role)) {\n    res.writeHead(302, {\n      Location: '/api/v1/login'\n    });\n    res.end();\n    return {\n      props: {}\n    };\n  }\n\n  const data = getData ? await getData({\n    req,\n    res\n  }, session.user) : {};\n  return {\n    props: _objectSpread({\n      user: session.user\n    }, data)\n  };\n};","map":null,"metadata":{},"sourceType":"module"}